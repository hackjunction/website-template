input createMediafieldInput {
  data: MediafieldInput
}

type createMediafieldPayload {
  mediafield: Mediafield
}

input createPageInput {
  data: PageInput
}

type createPagePayload {
  page: Page
}

input createPartnerInput {
  data: PartnerInput
}

type createPartnerPayload {
  partner: Partner
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createSocialmediapostsInput {
  data: SocialmediapostsInput
}

type createSocialmediapostsPayload {
  socialmediapost: Socialmediaposts
}

input createStaticcontentInput {
  data: StaticcontentInput
}

type createStaticcontentPayload {
  staticcontent: Staticcontent
}

input createTechnologyInput {
  data: TechnologyInput
}

type createTechnologyPayload {
  technology: Technology
}

input createTextfieldInput {
  data: TextfieldInput
}

type createTextfieldPayload {
  textfield: Textfield
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteMediafieldInput {
  where: InputID
}

type deleteMediafieldPayload {
  mediafield: Mediafield
}

input deletePageInput {
  where: InputID
}

type deletePagePayload {
  page: Page
}

input deletePartnerInput {
  where: InputID
}

type deletePartnerPayload {
  partner: Partner
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteSocialmediapostsInput {
  where: InputID
}

type deleteSocialmediapostsPayload {
  socialmediapost: Socialmediaposts
}

input deleteStaticcontentInput {
  where: InputID
}

type deleteStaticcontentPayload {
  staticcontent: Staticcontent
}

input deleteTechnologyInput {
  where: InputID
}

type deleteTechnologyPayload {
  technology: Technology
}

input deleteTextfieldInput {
  where: InputID
}

type deleteTextfieldPayload {
  textfield: Textfield
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editMediafieldInput {
  key: ENUM_MEDIAFIELD_KEY
  media: ID
}

input editPageInput {
  Title: String
  URLPath: String
  Body: String
  HeaderImage: ID
}

input editPartnerInput {
  Logo: ID
  Name: String
  URL: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSocialmediapostsInput {
  Name: String
  Image: ID
}

input editStaticcontentInput {
  Public: Boolean
  HomePageTitle: String
  HomePageBody: String
  HomePageHeaderImage: ID
  NotFoundPageTitle: String
  NotFoundPageBody: String
  NotFoundPageHeaderImage: ID
}

input editTechnologyInput {
  name: String
  logo: ID
}

input editTextfieldInput {
  key: ENUM_TEXTFIELD_KEY
  text: String
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

enum ENUM_MEDIAFIELD_KEY {
  homePageHeaderImage
  notFoundPageHeaderImage
}

enum ENUM_TEXTFIELD_KEY {
  homePageTitle
  homePageBody
  notFoundPageTitle
  notFoundPageBody
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A piece of media (image most likely) with a key, can be shown in a specific place on the website.
"""
type Mediafield {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: ENUM_MEDIAFIELD_KEY!
  media: UploadFile
}

type MediafieldAggregator {
  count: Int
}

type MediafieldConnection {
  values: [Mediafield]
  groupBy: MediafieldGroupBy
  aggregate: MediafieldAggregator
}

type MediafieldConnection_id {
  key: ID
  connection: MediafieldConnection
}

type MediafieldConnectionCreatedAt {
  key: DateTime
  connection: MediafieldConnection
}

type MediafieldConnectionKey {
  key: String
  connection: MediafieldConnection
}

type MediafieldConnectionMedia {
  key: ID
  connection: MediafieldConnection
}

type MediafieldConnectionUpdatedAt {
  key: DateTime
  connection: MediafieldConnection
}

type MediafieldGroupBy {
  _id: [MediafieldConnection_id]
  createdAt: [MediafieldConnectionCreatedAt]
  updatedAt: [MediafieldConnectionUpdatedAt]
  key: [MediafieldConnectionKey]
  media: [MediafieldConnectionMedia]
}

input MediafieldInput {
  key: ENUM_MEDIAFIELD_KEY!
  media: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Mediafield | createMediafieldPayload | updateMediafieldPayload | deleteMediafieldPayload | MediafieldConnection | MediafieldAggregator | MediafieldGroupBy | MediafieldConnection_id | MediafieldConnectionCreatedAt | MediafieldConnectionUpdatedAt | MediafieldConnectionKey | MediafieldConnectionMedia | Page | createPagePayload | updatePagePayload | deletePagePayload | PageConnection | PageAggregator | PageGroupBy | PageConnection_id | PageConnectionCreatedAt | PageConnectionUpdatedAt | PageConnectionTitle | PageConnectionURLPath | PageConnectionBody | PageConnectionHeaderImage | Partner | createPartnerPayload | updatePartnerPayload | deletePartnerPayload | PartnerConnection | PartnerAggregator | PartnerGroupBy | PartnerConnection_id | PartnerConnectionCreatedAt | PartnerConnectionUpdatedAt | PartnerConnectionLogo | PartnerConnectionName | PartnerConnectionURL | Socialmediaposts | createSocialmediapostsPayload | updateSocialmediapostsPayload | deleteSocialmediapostsPayload | SocialmediapostsConnection | SocialmediapostsAggregator | SocialmediapostsGroupBy | SocialmediapostsConnection_id | SocialmediapostsConnectionCreatedAt | SocialmediapostsConnectionUpdatedAt | SocialmediapostsConnectionName | SocialmediapostsConnectionImage | Staticcontent | createStaticcontentPayload | updateStaticcontentPayload | deleteStaticcontentPayload | StaticcontentConnection | StaticcontentAggregator | StaticcontentGroupBy | StaticcontentConnection_id | StaticcontentConnectionCreatedAt | StaticcontentConnectionUpdatedAt | StaticcontentConnectionPublic | StaticcontentConnectionHomePageTitle | StaticcontentConnectionHomePageBody | StaticcontentConnectionHomePageHeaderImage | StaticcontentConnectionNotFoundPageTitle | StaticcontentConnectionNotFoundPageBody | StaticcontentConnectionNotFoundPageHeaderImage | Technology | createTechnologyPayload | updateTechnologyPayload | deleteTechnologyPayload | TechnologyConnection | TechnologyAggregator | TechnologyGroupBy | TechnologyConnection_id | TechnologyConnectionCreatedAt | TechnologyConnectionUpdatedAt | TechnologyConnectionName | TechnologyConnectionLogo | Textfield | createTextfieldPayload | updateTextfieldPayload | deleteTextfieldPayload | TextfieldConnection | TextfieldAggregator | TextfieldGroupBy | TextfieldConnection_id | TextfieldConnectionCreatedAt | TextfieldConnectionUpdatedAt | TextfieldConnectionKey | TextfieldConnectionText | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createMediafield(input: createMediafieldInput): createMediafieldPayload
  updateMediafield(input: updateMediafieldInput): updateMediafieldPayload
  deleteMediafield(input: deleteMediafieldInput): deleteMediafieldPayload
  createPage(input: createPageInput): createPagePayload
  updatePage(input: updatePageInput): updatePagePayload
  deletePage(input: deletePageInput): deletePagePayload
  createPartner(input: createPartnerInput): createPartnerPayload
  updatePartner(input: updatePartnerInput): updatePartnerPayload
  deletePartner(input: deletePartnerInput): deletePartnerPayload
  createSocialmediaposts(input: createSocialmediapostsInput): createSocialmediapostsPayload
  updateSocialmediaposts(input: updateSocialmediapostsInput): updateSocialmediapostsPayload
  deleteSocialmediaposts(input: deleteSocialmediapostsInput): deleteSocialmediapostsPayload
  createStaticcontent(input: createStaticcontentInput): createStaticcontentPayload
  updateStaticcontent(input: updateStaticcontentInput): updateStaticcontentPayload
  deleteStaticcontent(input: deleteStaticcontentInput): deleteStaticcontentPayload
  createTechnology(input: createTechnologyInput): createTechnologyPayload
  updateTechnology(input: updateTechnologyInput): updateTechnologyPayload
  deleteTechnology(input: deleteTechnologyInput): deleteTechnologyPayload
  createTextfield(input: createTextfieldInput): createTextfieldPayload
  updateTextfield(input: updateTextfieldInput): updateTextfieldPayload
  deleteTextfield(input: deleteTextfieldInput): deleteTextfieldPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

"""A custom page with a unique url path"""
type Page {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Title: String
  URLPath: String
  Body: String
  HeaderImage: UploadFile
}

type PageAggregator {
  count: Int
}

type PageConnection {
  values: [Page]
  groupBy: PageGroupBy
  aggregate: PageAggregator
}

type PageConnection_id {
  key: ID
  connection: PageConnection
}

type PageConnectionBody {
  key: String
  connection: PageConnection
}

type PageConnectionCreatedAt {
  key: DateTime
  connection: PageConnection
}

type PageConnectionHeaderImage {
  key: ID
  connection: PageConnection
}

type PageConnectionTitle {
  key: String
  connection: PageConnection
}

type PageConnectionUpdatedAt {
  key: DateTime
  connection: PageConnection
}

type PageConnectionURLPath {
  key: String
  connection: PageConnection
}

type PageGroupBy {
  _id: [PageConnection_id]
  createdAt: [PageConnectionCreatedAt]
  updatedAt: [PageConnectionUpdatedAt]
  Title: [PageConnectionTitle]
  URLPath: [PageConnectionURLPath]
  Body: [PageConnectionBody]
  HeaderImage: [PageConnectionHeaderImage]
}

input PageInput {
  Title: String
  URLPath: String
  Body: String
  HeaderImage: ID
}

type Partner {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Logo: UploadFile
  Name: String
  URL: String
}

type PartnerAggregator {
  count: Int
}

type PartnerConnection {
  values: [Partner]
  groupBy: PartnerGroupBy
  aggregate: PartnerAggregator
}

type PartnerConnection_id {
  key: ID
  connection: PartnerConnection
}

type PartnerConnectionCreatedAt {
  key: DateTime
  connection: PartnerConnection
}

type PartnerConnectionLogo {
  key: ID
  connection: PartnerConnection
}

type PartnerConnectionName {
  key: String
  connection: PartnerConnection
}

type PartnerConnectionUpdatedAt {
  key: DateTime
  connection: PartnerConnection
}

type PartnerConnectionURL {
  key: String
  connection: PartnerConnection
}

type PartnerGroupBy {
  _id: [PartnerConnection_id]
  createdAt: [PartnerConnectionCreatedAt]
  updatedAt: [PartnerConnectionUpdatedAt]
  Logo: [PartnerConnectionLogo]
  Name: [PartnerConnectionName]
  URL: [PartnerConnectionURL]
}

input PartnerInput {
  Logo: ID
  Name: String
  URL: String
}

type Query {
  mediafield(id: ID!): Mediafield
  mediafields(sort: String, limit: Int, start: Int, where: JSON): [Mediafield]
  mediafieldsConnection(sort: String, limit: Int, start: Int, where: JSON): MediafieldConnection
  page(id: ID!): Page
  pages(sort: String, limit: Int, start: Int, where: JSON): [Page]
  pagesConnection(sort: String, limit: Int, start: Int, where: JSON): PageConnection
  partner(id: ID!): Partner
  partners(sort: String, limit: Int, start: Int, where: JSON): [Partner]
  partnersConnection(sort: String, limit: Int, start: Int, where: JSON): PartnerConnection
  socialmediapost(id: ID!): Socialmediaposts
  socialmediaposts(sort: String, limit: Int, start: Int, where: JSON): [Socialmediaposts]
  socialmediapostsConnection(sort: String, limit: Int, start: Int, where: JSON): SocialmediapostsConnection
  staticcontent(id: ID!): Staticcontent
  staticcontents(sort: String, limit: Int, start: Int, where: JSON): [Staticcontent]
  staticcontentsConnection(sort: String, limit: Int, start: Int, where: JSON): StaticcontentConnection
  technology(id: ID!): Technology
  technologies(sort: String, limit: Int, start: Int, where: JSON): [Technology]
  technologiesConnection(sort: String, limit: Int, start: Int, where: JSON): TechnologyConnection
  textfield(id: ID!): Textfield
  textfields(sort: String, limit: Int, start: Int, where: JSON): [Textfield]
  textfieldsConnection(sort: String, limit: Int, start: Int, where: JSON): TextfieldConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Socialmediaposts {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Name: String
  Image: UploadFile
}

type SocialmediapostsAggregator {
  count: Int
}

type SocialmediapostsConnection {
  values: [Socialmediaposts]
  groupBy: SocialmediapostsGroupBy
  aggregate: SocialmediapostsAggregator
}

type SocialmediapostsConnection_id {
  key: ID
  connection: SocialmediapostsConnection
}

type SocialmediapostsConnectionCreatedAt {
  key: DateTime
  connection: SocialmediapostsConnection
}

type SocialmediapostsConnectionImage {
  key: ID
  connection: SocialmediapostsConnection
}

type SocialmediapostsConnectionName {
  key: String
  connection: SocialmediapostsConnection
}

type SocialmediapostsConnectionUpdatedAt {
  key: DateTime
  connection: SocialmediapostsConnection
}

type SocialmediapostsGroupBy {
  _id: [SocialmediapostsConnection_id]
  createdAt: [SocialmediapostsConnectionCreatedAt]
  updatedAt: [SocialmediapostsConnectionUpdatedAt]
  Name: [SocialmediapostsConnectionName]
  Image: [SocialmediapostsConnectionImage]
}

input SocialmediapostsInput {
  Name: String
  Image: ID
}

"""
Various static content on the website, which doesn't make sense as a standalone content type.
"""
type Staticcontent {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Public: Boolean
  HomePageTitle: String
  HomePageBody: String
  HomePageHeaderImage: UploadFile
  NotFoundPageTitle: String
  NotFoundPageBody: String
  NotFoundPageHeaderImage: UploadFile
}

type StaticcontentAggregator {
  count: Int
}

type StaticcontentConnection {
  values: [Staticcontent]
  groupBy: StaticcontentGroupBy
  aggregate: StaticcontentAggregator
}

type StaticcontentConnection_id {
  key: ID
  connection: StaticcontentConnection
}

type StaticcontentConnectionCreatedAt {
  key: DateTime
  connection: StaticcontentConnection
}

type StaticcontentConnectionHomePageBody {
  key: String
  connection: StaticcontentConnection
}

type StaticcontentConnectionHomePageHeaderImage {
  key: ID
  connection: StaticcontentConnection
}

type StaticcontentConnectionHomePageTitle {
  key: String
  connection: StaticcontentConnection
}

type StaticcontentConnectionNotFoundPageBody {
  key: String
  connection: StaticcontentConnection
}

type StaticcontentConnectionNotFoundPageHeaderImage {
  key: ID
  connection: StaticcontentConnection
}

type StaticcontentConnectionNotFoundPageTitle {
  key: String
  connection: StaticcontentConnection
}

type StaticcontentConnectionPublic {
  key: Boolean
  connection: StaticcontentConnection
}

type StaticcontentConnectionUpdatedAt {
  key: DateTime
  connection: StaticcontentConnection
}

type StaticcontentGroupBy {
  _id: [StaticcontentConnection_id]
  createdAt: [StaticcontentConnectionCreatedAt]
  updatedAt: [StaticcontentConnectionUpdatedAt]
  Public: [StaticcontentConnectionPublic]
  HomePageTitle: [StaticcontentConnectionHomePageTitle]
  HomePageBody: [StaticcontentConnectionHomePageBody]
  HomePageHeaderImage: [StaticcontentConnectionHomePageHeaderImage]
  NotFoundPageTitle: [StaticcontentConnectionNotFoundPageTitle]
  NotFoundPageBody: [StaticcontentConnectionNotFoundPageBody]
  NotFoundPageHeaderImage: [StaticcontentConnectionNotFoundPageHeaderImage]
}

input StaticcontentInput {
  Public: Boolean
  HomePageTitle: String
  HomePageBody: String
  HomePageHeaderImage: ID
  NotFoundPageTitle: String
  NotFoundPageBody: String
  NotFoundPageHeaderImage: ID
}

"""Technologies we love"""
type Technology {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  logo: UploadFile
}

type TechnologyAggregator {
  count: Int
}

type TechnologyConnection {
  values: [Technology]
  groupBy: TechnologyGroupBy
  aggregate: TechnologyAggregator
}

type TechnologyConnection_id {
  key: ID
  connection: TechnologyConnection
}

type TechnologyConnectionCreatedAt {
  key: DateTime
  connection: TechnologyConnection
}

type TechnologyConnectionLogo {
  key: ID
  connection: TechnologyConnection
}

type TechnologyConnectionName {
  key: String
  connection: TechnologyConnection
}

type TechnologyConnectionUpdatedAt {
  key: DateTime
  connection: TechnologyConnection
}

type TechnologyGroupBy {
  _id: [TechnologyConnection_id]
  createdAt: [TechnologyConnectionCreatedAt]
  updatedAt: [TechnologyConnectionUpdatedAt]
  name: [TechnologyConnectionName]
  logo: [TechnologyConnectionLogo]
}

input TechnologyInput {
  name: String
  logo: ID
}

"""
A piece of text with a key value - can be shown in a specific place on the website
"""
type Textfield {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: ENUM_TEXTFIELD_KEY!
  text: String!
}

type TextfieldAggregator {
  count: Int
}

type TextfieldConnection {
  values: [Textfield]
  groupBy: TextfieldGroupBy
  aggregate: TextfieldAggregator
}

type TextfieldConnection_id {
  key: ID
  connection: TextfieldConnection
}

type TextfieldConnectionCreatedAt {
  key: DateTime
  connection: TextfieldConnection
}

type TextfieldConnectionKey {
  key: String
  connection: TextfieldConnection
}

type TextfieldConnectionText {
  key: String
  connection: TextfieldConnection
}

type TextfieldConnectionUpdatedAt {
  key: DateTime
  connection: TextfieldConnection
}

type TextfieldGroupBy {
  _id: [TextfieldConnection_id]
  createdAt: [TextfieldConnectionCreatedAt]
  updatedAt: [TextfieldConnectionUpdatedAt]
  key: [TextfieldConnectionKey]
  text: [TextfieldConnectionText]
}

input TextfieldInput {
  key: ENUM_TEXTFIELD_KEY!
  text: String!
}

input updateMediafieldInput {
  where: InputID
  data: editMediafieldInput
}

type updateMediafieldPayload {
  mediafield: Mediafield
}

input updatePageInput {
  where: InputID
  data: editPageInput
}

type updatePagePayload {
  page: Page
}

input updatePartnerInput {
  where: InputID
  data: editPartnerInput
}

type updatePartnerPayload {
  partner: Partner
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSocialmediapostsInput {
  where: InputID
  data: editSocialmediapostsInput
}

type updateSocialmediapostsPayload {
  socialmediapost: Socialmediaposts
}

input updateStaticcontentInput {
  where: InputID
  data: editStaticcontentInput
}

type updateStaticcontentPayload {
  staticcontent: Staticcontent
}

input updateTechnologyInput {
  where: InputID
  data: editTechnologyInput
}

type updateTechnologyPayload {
  technology: Technology
}

input updateTextfieldInput {
  where: InputID
  data: editTextfieldInput
}

type updateTextfieldPayload {
  textfield: Textfield
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
